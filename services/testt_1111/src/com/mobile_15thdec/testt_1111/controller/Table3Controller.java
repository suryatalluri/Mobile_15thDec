/*Copyright (c) 2015-2016 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.mobile_15thdec.testt_1111.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.mobile_15thdec.testt_1111.service.Table3Service;
import org.springframework.web.bind.annotation.RequestBody;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.mobile_15thdec.testt_1111.*;
import com.mobile_15thdec.testt_1111.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Table3.
 * @see com.mobile_15thdec.testt_1111.Table3
 */
@RestController(value = "Testt_1111.Table3Controller")
@RequestMapping("/testt_1111/Table3")
@Api(description = "Exposes APIs to work with Table3 resource.", value = "Table3Controller")
public class Table3Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table3Controller.class);

    @Autowired
    @Qualifier("testt_1111.Table3Service")
    private Table3Service table3Service;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Table3 instances matching the search criteria.")
    public Page<Table3> findTable3s(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Table3s list");
        return table3Service.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Table3 instances.")
    public Page<Table3> getTable3s(Pageable pageable) {
        LOGGER.debug("Rendering Table3s list");
        return table3Service.findAll(pageable);
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table3 instance associated with the given composite-id.")
    public Table3 getTable3(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table2Id temp = new Table2Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Getting Table3 with id: {}", temp);
        Table3 instance = table3Service.findById(temp);
        LOGGER.debug("Table3 details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table3 instance associated with the given composite-id.")
    public boolean deleteTable3(@RequestParam("column2") String column2, @RequestParam("id") Integer id) throws EntityNotFoundException {
        Table2Id temp = new Table2Id();
        temp.setColumn2(column2);
        temp.setId(id);
        LOGGER.debug("Deleting Table3 with id: {}", temp);
        Table3 deleted = table3Service.delete(temp);
        return deleted != null;
    }

    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table3 instance associated with the given composite-id.")
    public Table3 editTable3(@RequestParam("column2") String column2, @RequestParam("id") Integer id, @RequestBody Table3 instance) throws EntityNotFoundException {
        Table2Id temp = new Table2Id();
        temp.setColumn2(column2);
        temp.setId(id);
        table3Service.delete(temp);
        instance = table3Service.create(instance);
        LOGGER.debug("Table3 details with id is updated: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new Table3 instance.")
    public Table3 createTable3(@RequestBody Table3 instance) {
        LOGGER.debug("Create Table3 with information: {}", instance);
        instance = table3Service.create(instance);
        LOGGER.debug("Created Table3 with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setTable3Service(Table3Service service) {
        this.table3Service = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Table3 instances.")
    public Long countAllTable3s() {
        LOGGER.debug("counting Table3s");
        Long count = table3Service.countAll();
        return count;
    }
}
